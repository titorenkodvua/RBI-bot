import * as cron from 'node-cron';
import { getRowCountSafe, getAllTransactions, calculateBalance } from './googleSheets';
import { getNotificationData, updateNotificationData, getAllUsersWithNotifications } from '../database/fileStorage';
import { bot } from '../bot';
import { botConfig } from '../config';
import { formatTransactionInput } from '../utils/messageParser';

let isMonitoringStarted = false;
let cronTask: cron.ScheduledTask | null = null;

export function startNotificationService(): void {
  if (isMonitoringStarted) {
    console.log('‚ö†Ô∏è Notification service already started');
    return;
  }

  console.log(`üìÖ Starting notification service with interval: ${botConfig.notificationInterval}`);
  
  cronTask = cron.schedule(botConfig.notificationInterval, async () => {
    await checkForNewTransactions();
  });

  isMonitoringStarted = true;
  console.log('‚úÖ Notification service started');
}

export function stopNotificationService(): void {
  if (!isMonitoringStarted || !cronTask) {
    return;
  }

  cronTask.stop();
  cronTask = null;
  isMonitoringStarted = false;
  console.log('üõë Notification service stopped');
}

async function checkForNewTransactions(): Promise<void> {
  try {
    console.log(`üîç Checking for new transactions at ${new Date().toISOString()}`);
    
    const allTransactions = await getAllTransactions();
    const currentRowCount = allTransactions.length;
    const notificationData = await getNotificationData();

    console.log(`üìä Current state: ${currentRowCount} rows, last known: ${notificationData?.lastRowCount || 'none'}`);

    if (!notificationData) {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('üÜï First run - initializing notification data');
      await updateNotificationData({
        lastRowCount: currentRowCount,
        lastChecked: new Date()
      });
      
      return;
    }

    if (currentRowCount > notificationData.lastRowCount) {
      const newTransactionsCount = currentRowCount - notificationData.lastRowCount;
      console.log(`üÜï Found ${newTransactionsCount} new transaction(s)`);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ)
      const newTransactions = allTransactions.slice(-newTransactionsCount);
      
      if (newTransactions.length > 0) {
        await notifyUsersAboutNewTransactions(newTransactions);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await updateNotificationData({
        lastRowCount: currentRowCount,
        lastChecked: new Date()
      });
    } else if (currentRowCount < notificationData.lastRowCount) {
      const deletedTransactionsCount = notificationData.lastRowCount - currentRowCount;
      console.log(`üóëÔ∏è Detected ${deletedTransactionsCount} deleted transaction(s)`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫
      await notifyUsersAboutDeletedTransactions(deletedTransactionsCount, currentRowCount);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await updateNotificationData({
        lastRowCount: currentRowCount,
        lastChecked: new Date()
      });
    } else {
      console.log('‚úÖ No changes detected');
    }

  } catch (error) {
    console.error('‚ùå Error checking for new transactions:', error);
    console.error('‚ùå Error details:', {
      message: error instanceof Error ? error.message : String(error),
      code: (error as any)?.code,
      status: (error as any)?.status
    });
    // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ API
    // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫
    // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
  }
}

async function notifyUsersAboutNewTransactions(transactions: any[]): Promise<void> {
  try {
    const users = await getAllUsersWithNotifications();
    
    if (users.length === 0) {
      console.log('üì± No users with notifications enabled');
      return;
    }

    for (const transaction of transactions) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
      const balanceAfter = await calculateBalance();
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–æ –Ω–µ—ë
      const operationAmount = transaction.type === 'give' ? transaction.amount : -transaction.amount;
      
      // –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: –±–∞–ª–∞–Ω—Å–î–æ = –±–∞–ª–∞–Ω—Å–ü–æ—Å–ª–µ - —Ç–µ–∫—É—â–∞—è–û–ø–µ—Ä–∞—Ü–∏—è
      let balanceBeforeAmount;
      
      if (balanceAfter.amount === 0) {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å 0, —Ç–æ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—ã–ª –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
        balanceBeforeAmount = -operationAmount;
      } else {
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (balanceAfter.debtor === botConfig.participants.dmitry) {
          // –î–º–∏—Ç—Ä–∏–π –¥–æ–ª–∂–µ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)
          balanceBeforeAmount = -balanceAfter.amount - operationAmount;
        } else {
          // –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –¥–æ–ª–∂–µ–Ω –î–º–∏—Ç—Ä–∏—é (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)
          balanceBeforeAmount = balanceAfter.amount - operationAmount;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
      let balanceBefore;
      if (balanceBeforeAmount === 0) {
        balanceBefore = {
          debtor: '',
          creditor: '',
          amount: 0,
          description: ''
        };
      } else if (balanceBeforeAmount > 0) {
        // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π = –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –¥–æ–ª–∂–µ–Ω –î–º–∏—Ç—Ä–∏—é
        balanceBefore = {
          debtor: botConfig.participants.alexander,
          creditor: botConfig.participants.dmitry,
          amount: balanceBeforeAmount,
          description: `${botConfig.participants.alexander} –¥–æ–ª–∂–µ–Ω ${botConfig.participantsDative.dmitry}`
        };
      } else {
        // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = –î–º–∏—Ç—Ä–∏–π –¥–æ–ª–∂–µ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É
        balanceBefore = {
          debtor: botConfig.participants.dmitry,
          creditor: botConfig.participants.alexander,
          amount: Math.abs(balanceBeforeAmount),
          description: `${botConfig.participants.dmitry} –¥–æ–ª–∂–µ–Ω ${botConfig.participantsDative.alexander}`
        };
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã —Å–æ –∑–Ω–∞–∫–æ–º)
      const formatBalance = (balance: { debtor: string; creditor: string; amount: number; description: string }) => {
        if (balance.amount === 0) {
          return `${botConfig.currency.symbol}0.00`;
        }
        // –ï—Å–ª–∏ –î–º–∏—Ç—Ä–∏–π –¥–æ–ª–∂–µ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        // –ï—Å–ª–∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –¥–æ–ª–∂–µ–Ω –î–º–∏—Ç—Ä–∏—é - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        const sign = balance.debtor === botConfig.participants.dmitry ? '-' : '+';
        const formattedAmount = balance.amount.toLocaleString('en-US', {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        });
        return `${sign}${botConfig.currency.symbol}${formattedAmount}`;
      };
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É
      const balanceBeforeStr = formatBalance(balanceBefore);
      const balanceAfterStr = formatBalance(balanceAfter);
      const operationSign = transaction.type === 'give' ? '+' : '-';
      const operationAmountStr = `${botConfig.currency.symbol}${transaction.amount.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      })}`;
      
      const message = `
üîî –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:
${formatTransactionInput({ amount: transaction.amount, description: transaction.description, type: transaction.type })}
üìÖ ${transaction.date}

${transaction.type === 'give' ? 
  `üí∞ ${botConfig.participants.dmitry} ‚Üí ${botConfig.participants.alexander}: ${botConfig.currency.symbol}${transaction.amount.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  })}` : 
  `üí∏ ${botConfig.participants.alexander} ‚Üí ${botConfig.participants.dmitry}: ${botConfig.currency.symbol}${transaction.amount.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  })}`}

–ë–∞–ª–∞–Ω—Å:
${balanceBeforeStr} ${operationSign} ${operationAmountStr} = 
${balanceAfterStr}
`;

      for (const user of users) {
        try {
          await bot.telegram.sendMessage(user.telegramId, message);
          
          if (botConfig.debug) {
            console.log(`üì§ Notification sent to ${user.firstName} (${user.telegramId})`);
          }
        } catch (error) {
          console.error(`‚ùå Failed to send notification to user ${user.telegramId}:`, error);
        }
      }
    }

    console.log(`‚úÖ Notifications sent for ${transactions.length} new transaction(s) to ${users.length} user(s)`);
  } catch (error) {
    console.error('‚ùå Error sending notifications:', error);
  }
}

async function notifyUsersAboutDeletedTransactions(deletedCount: number, currentCount: number): Promise<void> {
  try {
    const users = await getAllUsersWithNotifications();
    
    if (users.length === 0) {
      console.log('üì± No users with notifications enabled');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    const currentBalance = await calculateBalance();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formatBalance = (balance: { debtor: string; creditor: string; amount: number; description: string }) => {
      if (balance.amount === 0) {
        return `${botConfig.currency.symbol}0.00`;
      }
      const sign = balance.debtor === botConfig.participants.dmitry ? '-' : '+';
      const formattedAmount = balance.amount.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      return `${sign}${botConfig.currency.symbol}${formattedAmount}`;
    };
    
    const balanceStr = formatBalance(currentBalance);
    
    const message = `
üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${deletedCount}
–û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${currentCount}

üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceStr}
`;

    for (const user of users) {
      try {
        await bot.telegram.sendMessage(user.telegramId, message);
        
        if (botConfig.debug) {
          console.log(`üì§ Deletion notification sent to ${user.firstName} (${user.telegramId})`);
        }
      } catch (error) {
        console.error(`‚ùå Failed to send deletion notification to user ${user.telegramId}:`, error);
      }
    }

    console.log(`‚úÖ Deletion notifications sent to ${users.length} user(s)`);
  } catch (error) {
    console.error('‚ùå Error sending deletion notifications:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function forceCheckForNewTransactions(): Promise<void> {
  console.log('üîç Forced check for new transactions');
  await checkForNewTransactions();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function resetNotificationData(): Promise<void> {
  const currentRowCount = await getRowCountSafe();
  await updateNotificationData({
    lastRowCount: currentRowCount,
    lastChecked: new Date()
  });
  console.log('üîÑ Notification data reset');
} 
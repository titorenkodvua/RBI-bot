import { Telegraf, Context, Markup } from 'telegraf';
import { botConfig } from '../config';
import { formatDate } from '../utils/dateHelper';
import { logger } from '../utils/logger';
import {
  findUserByTelegramId,
  createUser,
  updateUser
} from '../database/fileStorage';
import { addTransactionRecord, getAllTransactions, calculateBalance } from '../services/googleSheets';
import { parseTransactionWithValidation, getTransactionExamples, validateAndParseAmount } from '../utils/messageParser';
import { forceCheckForNewTransactions } from '../services/notificationService';
import { TransactionRecord, User, UserState, TransactionType } from '../types';

const bot = new Telegraf(botConfig.token);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenuKeyboard() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance'),
      Markup.button.callback('üìù –ò—Å—Ç–æ—Ä–∏—è', 'history')
    ],
    [
      Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'add'),
      Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'notifications')
    ],
    [
      Markup.button.url('üìä –¢–∞–±–ª–∏—Ü–∞', `https://docs.google.com/spreadsheets/d/${botConfig.spreadsheetId}/edit`),
      Markup.button.callback('‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'help')
    ]
  ]);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
function getTransactionTypeKeyboard() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(`üí∞ ${botConfig.participants.dmitry} ‚Üí ${botConfig.participants.alexander} (+)`, 'add_give')
    ],
    [
      Markup.button.callback(`üí∏ ${botConfig.participants.alexander} ‚Üí ${botConfig.participants.dmitry} (-)`, 'add_take')
    ],
    [
      Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')
    ]
  ]);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function setUserState(telegramId: number, state: UserState, transactionType?: TransactionType, amount?: number) {
  const updates: Partial<User> = { state };
  if (transactionType !== undefined) {
    updates.tempTransactionType = transactionType;
  }
  if (amount !== undefined) {
    updates.tempAmount = amount;
  }
  await updateUser(telegramId, updates);
}

async function clearUserState(telegramId: number) {
  await updateUser(telegramId, {
    state: 'idle'
  });
}

function getUserState(user: User): UserState {
  return user.state || 'idle';
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–π—Ç–ª–∏—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.use(async (ctx, next) => {
  if (!ctx.from) return;

  const telegramId = ctx.from.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–π—Ç–ª–∏—Å—Ç
  if (botConfig.allowedUsers.length > 0 && !botConfig.allowedUsers.includes(telegramId)) {
    logger.warn(`üö´ Access denied for user ${telegramId} (@${ctx.from.username}) - not in whitelist`);
    await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.');
    return;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  return next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  if (!ctx.from) return;

  const telegramId = ctx.from.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = await findUserByTelegramId(telegramId);

  if (!user) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await createUser({
      telegramId,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name,
      isAdmin: telegramId === botConfig.adminUserId,
      notificationsEnabled: true
    });

    logger.info(`‚úÖ New user registered: ${user.firstName} (@${user.username})`);
  }

  ctx.user = user;
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  const user = ctx.user!;
  const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RBI Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á–µ—Ç –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ–∂–¥—É ${botConfig.participants.dmitry} –∏ ${botConfig.participants.alexander}.

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName}${user.username ? ` (@${user.username})` : ''}
${user.isAdmin ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : ''}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  await ctx.reply(welcomeMessage, getMainMenuKeyboard());
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
async function handleBalanceCommand(ctx: Context) {
  try {
    const balance = await calculateBalance();

    if (balance.amount === 0) {
      const message = `‚öñÔ∏è –ë–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –ù–∏–∫—Ç–æ –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ–ª–∂–µ–Ω!

üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`;
      await ctx.reply(message, getMainMenuKeyboard());
      return;
    }

    const formattedAmount = balance.amount.toLocaleString('en-US', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });

    const balanceMessage = `
‚öñÔ∏è –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤:

${balance.debtor === botConfig.participants.dmitry ? 'üí∏' : 'üí∞'} ${balance.description}: ${botConfig.currency.symbol}${formattedAmount}

üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`;

    await ctx.reply(balanceMessage, getMainMenuKeyboard());
  } catch (error) {
    logger.error('Error getting balance:', error as Error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
  }
}

async function handleHistoryCommand(ctx: Context) {
  try {
    const allTransactions = await getAllTransactions();

    if (allTransactions.length === 0) {
      const message = `üìù –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç

üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`;
      await ctx.reply(message, getMainMenuKeyboard());
      return;
    }

    const recentTransactions = allTransactions.slice(-10);

    const currencySymbol = botConfig.currency.symbol === '$' ? '&#36;' : botConfig.currency.symbol;
    let codeBlock = `–î–∞—Ç–∞            –°—É–º–º–∞ –û–ø–∏—Å–∞–Ω–∏–µ\n`;
    codeBlock += `---------- ------------- --------\n`;

    recentTransactions.forEach((transaction) => {
      const sign = transaction.type === 'give' ? '+' : '-';
      const formattedAmount = transaction.amount.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });

      const date = transaction.date.padEnd(10);
      const amount = `${sign}${formattedAmount}`.padStart(13);
      const description = transaction.description.length > 20
        ? transaction.description.substring(0, 17) + '...'
        : transaction.description;

      codeBlock += `${date} ${amount} ${description}\n`;
    });

    let historyMessage = `üìù –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${allTransactions.length} –≤—Å–µ–≥–æ):\n\n<pre>${codeBlock}</pre>`;

    if (allTransactions.length > 10) {
      historyMessage += `\n\n... –∏ –µ—â–µ ${allTransactions.length - 10} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`;
    }

    const currentBalance = await calculateBalance();
    if (currentBalance.amount === 0) {
      historyMessage += `\n\n‚öñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${currencySymbol}0.00`;
    } else {
      const sign = currentBalance.debtor === botConfig.participants.dmitry ? '-' : '+';
      const formattedBalance = currentBalance.amount.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      historyMessage += `\n\n‚öñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${sign}${currencySymbol}${formattedBalance}`;
    }

    historyMessage += `\n\nüè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`;

    await ctx.reply(historyMessage, {
      parse_mode: 'HTML',
      ...getMainMenuKeyboard()
    });
  } catch (error) {
    logger.error('Error getting history:', error as Error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
}

async function handleNotificationsCommand(ctx: Context & { user?: User }) {
  const user = ctx.user!;
  const status = user.notificationsEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';

  const message = `
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å ${status}

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`;

  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(user.notificationsEnabled ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å' : 'üîî –í–∫–ª—é—á–∏—Ç—å',
        user.notificationsEnabled ? 'notifications_off' : 'notifications_on')
    ],
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);

  await ctx.reply(message, keyboard);
}

async function handleHelpCommand(ctx: Context) {
  const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ RBI Bot:

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üí∞ **–ë–∞–ª–∞–Ω—Å** - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤
‚Ä¢ üìù **–ò—Å—Ç–æ—Ä–∏—è** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∏—Ç–æ–≥–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
‚Ä¢ ‚ûï **–î–æ–±–∞–≤–∏—Ç—å** - –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üöÄ **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:**

**–°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 150.50)
4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ)

**–°–ø–æ—Å–æ–± 2: –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \`—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ\`
${getTransactionExamples()}

üí° **–õ–æ–≥–∏–∫–∞ –∑–Ω–∞–∫–æ–≤:**
‚Ä¢ **+** (–ø–ª—é—Å) = ${botConfig.participants.dmitry} ‚Üí ${botConfig.participants.alexander}
‚Ä¢ **-** (–º–∏–Ω—É—Å) = ${botConfig.participants.alexander} ‚Üí ${botConfig.participants.dmitry}

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ \`/menu\` - –≤—ã–∑–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ \`/start\` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞

üìä **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
‚Ä¢ ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á

üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`;

  await ctx.reply(helpMessage, getMainMenuKeyboard());
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries (–∫–Ω–æ–ø–∫–∏)
bot.action('balance', async (ctx) => {
  await ctx.answerCbQuery();
  await handleBalanceCommand(ctx);
});

bot.action('history', async (ctx) => {
  await ctx.answerCbQuery();
  await handleHistoryCommand(ctx);
});

bot.action('add', async (ctx) => {
  await ctx.answerCbQuery();
  const message = `
‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:`;

  await ctx.reply(message, getTransactionTypeKeyboard());
});

bot.action('notifications', async (ctx) => {
  await ctx.answerCbQuery();
  await handleNotificationsCommand(ctx);
});

bot.action('help', async (ctx) => {
  await ctx.answerCbQuery();
  await handleHelpCommand(ctx);
});

bot.action('main_menu', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenuKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.action('notifications_on', async (ctx) => {
  await ctx.answerCbQuery();
  await updateUser(ctx.user!.telegramId, { notificationsEnabled: true });
  await ctx.reply('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

bot.action('notifications_off', async (ctx) => {
  await ctx.answerCbQuery();
  await updateUser(ctx.user!.telegramId, { notificationsEnabled: false });
  await ctx.reply('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
bot.action('add_give', async (ctx) => {
  await ctx.answerCbQuery();
  await setUserState(ctx.user!.telegramId, 'waiting_for_amount', 'give');

  const message = `
üí∞ ${botConfig.participants.dmitry} ‚Üí ${botConfig.participants.alexander} (+)

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:
–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 150.50`;

  await ctx.reply(message, Markup.inlineKeyboard([
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_add')]
  ]));
});

bot.action('add_take', async (ctx) => {
  await ctx.answerCbQuery();
  await setUserState(ctx.user!.telegramId, 'waiting_for_amount', 'take');

  const message = `
üí∏ ${botConfig.participants.alexander} ‚Üí ${botConfig.participants.dmitry} (-)

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:
–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 150.50`;

  await ctx.reply(message, Markup.inlineKeyboard([
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_add')]
  ]));
});

bot.action('cancel_add', async (ctx) => {
  await ctx.answerCbQuery();
  await clearUserState(ctx.user!.telegramId);
  await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ', getMainMenuKeyboard());
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
  await handleHelpCommand(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /menu - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
bot.command('menu', async (ctx) => {
  await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenuKeyboard());
});

// –ö–æ–º–∞–Ω–¥–∞ /add
bot.command('add', async (ctx) => {
  const message = ctx.message.text.replace('/add', '').trim();

  if (!message) {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    const responseMessage = `
‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:`;

    await ctx.reply(responseMessage, getTransactionTypeKeyboard());
    return;
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  await handleTransactionInput(ctx, message);
});

// –ö–æ–º–∞–Ω–¥–∞ /balance
bot.command('balance', async (ctx) => {
  await handleBalanceCommand(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /history
bot.command('history', async (ctx) => {
  await handleHistoryCommand(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /notifications
bot.command('notifications', async (ctx) => {
  const args = ctx.message.text.split(' ');
  const action = args[1]?.toLowerCase();

  if (!action || (action !== 'on' && action !== 'off')) {
    await handleNotificationsCommand(ctx);
    return;
  }

  const enabled = action === 'on';
  await updateUser(ctx.user!.telegramId, { notificationsEnabled: enabled });

  const status = enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
  const emoji = enabled ? 'üîî' : 'üîï';
  await ctx.reply(`${emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}`,
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('text', async (ctx) => {
  const message = ctx.message.text;
  const user = ctx.user!;
  const userState = getUserState(user);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  if (message.startsWith('/')) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (userState !== 'idle') {
      await clearUserState(user.telegramId);
    }

    await ctx.reply(
      '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
      getMainMenuKeyboard()
    );
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  switch (userState) {
    case 'waiting_for_amount':
      await handleAmountInput(ctx, message);
      break;
    case 'waiting_for_description':
      await handleDescriptionInput(ctx, message);
      break;
    case 'idle':
    default:
      // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
      await handleTransactionInput(ctx, message);
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
async function handleAmountInput(ctx: Context & { user?: User }, message: string) {
  const user = ctx.user!;
  const amountStr = message.trim();

  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ messageParser)
  const { isValid, amount, error } = validateAndParseAmount(amountStr);

  if (!isValid) {
    await ctx.reply(`
‚ùå ${error}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:
–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 150.50`,
      Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_add')]]));
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  await setUserState(user.telegramId, 'waiting_for_description', user.tempTransactionType, amount);

  const typeEmoji = user.tempTransactionType === 'give' ? 'üí∞' : 'üí∏';
  const typeText = user.tempTransactionType === 'give'
    ? `${botConfig.participants.dmitry} ‚Üí ${botConfig.participants.alexander}`
    : `${botConfig.participants.alexander} ‚Üí ${botConfig.participants.dmitry}`;
  const formattedAmount = amount!.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });

  const responseMessage = `
${typeEmoji} ${typeText}: $${formattedAmount}

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
–ù–∞–ø—Ä–∏–º–µ—Ä: –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ, –ø—Ä–æ–µ–∑–¥, –ø–æ–∫—É–ø–∫–∏`;

  await ctx.reply(responseMessage, Markup.inlineKeyboard([
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_add')]
  ]));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
async function handleDescriptionInput(ctx: Context & { user?: User }, message: string) {
  const user = ctx.user!;
  const description = message.trim();

  if (!description) {
    await ctx.reply(`
‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
–ù–∞–ø—Ä–∏–º–µ—Ä: –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ, –ø—Ä–æ–µ–∑–¥, –ø–æ–∫—É–ø–∫–∏`,
      Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_add')]]));
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  try {
    const userName = user.firstName || user.username || `User${user.telegramId}`;

    const transactionRecord: TransactionRecord = {
      date: formatDate(new Date()),
      user: userName,
      amount: user.tempAmount!,
      description,
      type: user.tempTransactionType!
    };

    logger.info(`‚ûï Adding transaction: ${user.tempTransactionType === 'give' ? '+' : '-'}$${user.tempAmount} - ${description} by ${userName}`);
    await addTransactionRecord(transactionRecord);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await clearUserState(user.telegramId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const typeEmoji = user.tempTransactionType === 'give' ? 'üí∞' : 'üí∏';
    const sign = user.tempTransactionType === 'give' ? '+' : '-';
    const typeText = user.tempTransactionType === 'give'
      ? `${botConfig.participants.dmitry} ‚Üí ${botConfig.participants.alexander}`
      : `${botConfig.participants.alexander} ‚Üí ${botConfig.participants.dmitry}`;
    const formattedAmount = user.tempAmount!.toLocaleString('en-US', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });

    await ctx.reply(`
‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!

${typeEmoji} ${typeText} ${sign}$${formattedAmount}
üìù ${description}`,
      getMainMenuKeyboard());

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets
    setTimeout(async () => {
      await forceCheckForNewTransactions();
    }, 2000);

  } catch (error) {
    logger.error('Error adding transaction:', error as Error);
    await clearUserState(user.telegramId);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', getMainMenuKeyboard());
  }
}

async function handleTransactionInput(ctx: Context & { user?: User }, message: string) {
  const result = parseTransactionWithValidation(message);

  if (!result.success) {
    await ctx.reply(`
‚ùå ${result.error}

${getTransactionExamples()}`,
      Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
    return;
  }

  const parsed = result.transaction!;

  try {
    const user = ctx.user!;
    const userName = user.firstName || user.username || `User${user.telegramId}`;

    const transactionRecord: TransactionRecord = {
      date: formatDate(new Date()),
      user: userName,
      amount: parsed.amount,
      description: parsed.description,
      type: parsed.type
    };

    logger.info(`‚ûï Adding transaction: ${parsed.type === 'give' ? '+' : '-'}$${parsed.amount} - ${parsed.description} by ${userName}`);
    await addTransactionRecord(transactionRecord);

    // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–¥—É—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    await ctx.reply('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]])
    );

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets
    setTimeout(async () => {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      await forceCheckForNewTransactions();
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

  } catch (error) {
    logger.error('Error adding transaction:', error as Error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
  }
}



export { bot };

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è Context
declare module 'telegraf' {
  interface Context {
    user?: User;
  }
} 
import { Telegraf, Context } from 'telegraf';
import { botConfig } from '../config';
import { formatDate } from '../utils/dateHelper';
import { 
  findUserByTelegramId, 
  createUser, 
  updateUser, 
  getAllUsersWithNotifications 
} from '../database/fileStorage';
import { addTransactionRecord, getRecentTransactions, getAllTransactions, formatTransactionForMessage, calculateBalance } from '../services/googleSheets';
import { parseTransactionWithValidation, formatTransactionInput, getTransactionExamples } from '../utils/messageParser';
import { forceCheckForNewTransactions } from '../services/notificationService';
import { TransactionRecord, User } from '../types';

const bot = new Telegraf(botConfig.token);

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  if (!ctx.from) return;
  
  const telegramId = ctx.from.id;
  let user = await findUserByTelegramId(telegramId);
  
  if (!user) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await createUser({
      telegramId,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name,
      isAdmin: telegramId === botConfig.adminUserId,
      notificationsEnabled: true
    });
    
    console.log(`‚úÖ New user registered: ${user.firstName} (@${user.username})`);
  }
  
  ctx.user = user;
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  const user = ctx.user!;
  const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RBI Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á–µ—Ç –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ–∂–¥—É ${botConfig.participants.dmitry} –∏ ${botConfig.participants.alexander}.

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName}${user.username ? ` (@${user.username})` : ''}
${user.isAdmin ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : ''}

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤
/history - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
/notifications - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/help - –ü–æ–º–æ—â—å

${getTransactionExamples()}
`;
  
  await ctx.reply(welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
  const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/add <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ> - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
/balance - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤
/history - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
/notifications on/off - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

${getTransactionExamples()}

üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ + –µ—Å–ª–∏ –¥–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏, - –µ—Å–ª–∏ –±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å–≥–∏
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
`;
  
  await ctx.reply(helpMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /add
bot.command('add', async (ctx) => {
  const message = ctx.message.text.replace('/add', '').trim();
  
  if (!message) {
    await ctx.reply(`
‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.

–ü—Ä–∏–º–µ—Ä: /add 1000 –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É

${getTransactionExamples()}
`);
    return;
  }

  await handleTransactionInput(ctx, message);
});

// –ö–æ–º–∞–Ω–¥–∞ /balance
bot.command('balance', async (ctx) => {
  try {
    const balance = await calculateBalance();
    
    if (balance.amount === 0) {
      await ctx.reply('‚öñÔ∏è –ë–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –ù–∏–∫—Ç–æ –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ–ª–∂–µ–Ω!');
      return;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å –∑–∞–ø—è—Ç—ã–º–∏ –¥–ª—è —Ç—ã—Å—è—á
    const formattedAmount = balance.amount.toLocaleString('en-US', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });

    const balanceMessage = `
‚öñÔ∏è –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤:

${balance.debtor === botConfig.participants.dmitry ? 'üí∏' : 'üí∞'} ${balance.description}: ${botConfig.currency.symbol}${formattedAmount}
`;

    await ctx.reply(balanceMessage);
  } catch (error) {
    console.error('Error getting balance:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /history
bot.command('history', async (ctx) => {
  try {
    const allTransactions = await getAllTransactions();
    
    if (allTransactions.length === 0) {
      await ctx.reply('üìù –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (–Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É)
    const recentTransactions = allTransactions.slice(-10);
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è HTML
    const currencySymbol = botConfig.currency.symbol === '$' ? '&#36;' : botConfig.currency.symbol;
    let codeBlock = `–î–∞—Ç–∞            –°—É–º–º–∞ –û–ø–∏—Å–∞–Ω–∏–µ\n`;
    codeBlock += `---------- ------------- --------\n`;
    
    recentTransactions.forEach((transaction) => {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å–æ –∑–Ω–∞–∫–æ–º
      const sign = transaction.type === 'give' ? '+' : '-';
      const formattedAmount = transaction.amount.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π –∫–æ–ª–æ–Ω–æ–∫
      const date = transaction.date.padEnd(10);
      const amount = `${sign}${formattedAmount}`.padStart(13);
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞
      const description = transaction.description.length > 20 
        ? transaction.description.substring(0, 17) + '...'
        : transaction.description;
      
      codeBlock += `${date} ${amount} ${description}\n`;
    });

    let historyMessage = `üìù –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${allTransactions.length} –≤—Å–µ–≥–æ):\n\n<pre>${codeBlock}</pre>`;

    if (allTransactions.length > 10) {
      historyMessage += `\n\n... –∏ –µ—â–µ ${allTransactions.length - 10} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    const currentBalance = await calculateBalance();
    if (currentBalance.amount === 0) {
      historyMessage += `\n\n‚öñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${currencySymbol}0.00`;
    } else {
      const sign = currentBalance.debtor === botConfig.participants.dmitry ? '-' : '+';
      const formattedBalance = currentBalance.amount.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      historyMessage += `\n\n‚öñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${sign}${currencySymbol}${formattedBalance}`;
    }

    await ctx.reply(historyMessage, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error getting history:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /notifications
bot.command('notifications', async (ctx) => {
  const args = ctx.message.text.split(' ');
  const action = args[1]?.toLowerCase();
  
  if (!action || (action !== 'on' && action !== 'off')) {
    const user = ctx.user!;
    const status = user.notificationsEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
    await ctx.reply(`
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å ${status}

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
/notifications on - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/notifications off - –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
`);
    return;
  }

  const enabled = action === 'on';
  await updateUser(ctx.user!.telegramId, { notificationsEnabled: enabled });
  
  const status = enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
  const emoji = enabled ? 'üîî' : 'üîï';
  await ctx.reply(`${emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π)
bot.on('text', async (ctx) => {
  const message = ctx.message.text;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
  if (message.startsWith('/')) {
    return;
  }
  
  await handleTransactionInput(ctx, message);
});

async function handleTransactionInput(ctx: Context & { user?: User }, message: string) {
  const result = parseTransactionWithValidation(message);
  
  if (!result.success) {
    await ctx.reply(`
‚ùå ${result.error}

${getTransactionExamples()}
`);
    return;
  }

  const parsed = result.transaction!;

  try {
    const user = ctx.user!;
    const userName = user.firstName || user.username || `User${user.telegramId}`;
    
    const transactionRecord: TransactionRecord = {
      date: formatDate(new Date()),
      user: userName,
      amount: parsed.amount,
      description: parsed.description,
      type: parsed.type
    };

    await addTransactionRecord(transactionRecord);
    
    // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–¥—É—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    await ctx.reply('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets
    setTimeout(async () => {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      await forceCheckForNewTransactions();
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    
  } catch (error) {
    console.error('Error adding transaction:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  }
}



export { bot };

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è Context
declare module 'telegraf' {
  interface Context {
    user?: User;
  }
} 
import { Telegraf, Context, Markup } from 'telegraf';
import { botConfig } from '../config';
import { formatDate } from '../utils/dateHelper';
import { 
  findUserByTelegramId, 
  createUser, 
  updateUser, 
  getAllUsersWithNotifications 
} from '../database/fileStorage';
import { addTransactionRecord, getRecentTransactions, getAllTransactions, formatTransactionForMessage, calculateBalance } from '../services/googleSheets';
import { parseTransactionWithValidation, formatTransactionInput, getTransactionExamples } from '../utils/messageParser';
import { forceCheckForNewTransactions } from '../services/notificationService';
import { TransactionRecord, User } from '../types';

const bot = new Telegraf(botConfig.token);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenuKeyboard() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance'),
      Markup.button.callback('üìù –ò—Å—Ç–æ—Ä–∏—è', 'history')
    ],
    [
      Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'add'),
      Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'notifications')
    ],
    [
      Markup.button.callback('‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'help')
    ]
  ]);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  if (!ctx.from) return;
  
  const telegramId = ctx.from.id;
  let user = await findUserByTelegramId(telegramId);
  
  if (!user) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await createUser({
      telegramId,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name,
      isAdmin: telegramId === botConfig.adminUserId,
      notificationsEnabled: true
    });
    
    console.log(`‚úÖ New user registered: ${user.firstName} (@${user.username})`);
  }
  
  ctx.user = user;
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  const user = ctx.user!;
  const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RBI Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á–µ—Ç –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ–∂–¥—É ${botConfig.participants.dmitry} –∏ ${botConfig.participants.alexander}.

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName}${user.username ? ` (@${user.username})` : ''}
${user.isAdmin ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : ''}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.reply(welcomeMessage, getMainMenuKeyboard());
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
async function handleBalanceCommand(ctx: Context) {
  try {
    const balance = await calculateBalance();
    
    if (balance.amount === 0) {
      await ctx.reply('‚öñÔ∏è –ë–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –ù–∏–∫—Ç–æ –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ–ª–∂–µ–Ω!', 
        Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
      return;
    }

    const formattedAmount = balance.amount.toLocaleString('en-US', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });

    const balanceMessage = `
‚öñÔ∏è –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤:

${balance.debtor === botConfig.participants.dmitry ? 'üí∏' : 'üí∞'} ${balance.description}: ${botConfig.currency.symbol}${formattedAmount}
`;

    await ctx.reply(balanceMessage, 
      Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
  } catch (error) {
    console.error('Error getting balance:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
  }
}

async function handleHistoryCommand(ctx: Context) {
  try {
    const allTransactions = await getAllTransactions();
    
    if (allTransactions.length === 0) {
      await ctx.reply('üìù –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç',
        Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
      return;
    }

    const recentTransactions = allTransactions.slice(-10);
    
    const currencySymbol = botConfig.currency.symbol === '$' ? '&#36;' : botConfig.currency.symbol;
    let codeBlock = `–î–∞—Ç–∞            –°—É–º–º–∞ –û–ø–∏—Å–∞–Ω–∏–µ\n`;
    codeBlock += `---------- ------------- --------\n`;
    
    recentTransactions.forEach((transaction) => {
      const sign = transaction.type === 'give' ? '+' : '-';
      const formattedAmount = transaction.amount.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      
      const date = transaction.date.padEnd(10);
      const amount = `${sign}${formattedAmount}`.padStart(13);
      const description = transaction.description.length > 20 
        ? transaction.description.substring(0, 17) + '...'
        : transaction.description;
      
      codeBlock += `${date} ${amount} ${description}\n`;
    });

    let historyMessage = `üìù –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${allTransactions.length} –≤—Å–µ–≥–æ):\n\n<pre>${codeBlock}</pre>`;

    if (allTransactions.length > 10) {
      historyMessage += `\n\n... –∏ –µ—â–µ ${allTransactions.length - 10} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`;
    }

    const currentBalance = await calculateBalance();
    if (currentBalance.amount === 0) {
      historyMessage += `\n\n‚öñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${currencySymbol}0.00`;
    } else {
      const sign = currentBalance.debtor === botConfig.participants.dmitry ? '-' : '+';
      const formattedBalance = currentBalance.amount.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      historyMessage += `\n\n‚öñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${sign}${currencySymbol}${formattedBalance}`;
    }

    await ctx.reply(historyMessage, { 
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]])
    });
  } catch (error) {
    console.error('Error getting history:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
}

async function handleNotificationsCommand(ctx: Context & { user?: User }) {
  const user = ctx.user!;
  const status = user.notificationsEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
  
  const message = `
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å ${status}

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`;

  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(user.notificationsEnabled ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å' : 'üîî –í–∫–ª—é—á–∏—Ç—å', 
        user.notificationsEnabled ? 'notifications_off' : 'notifications_on')
    ],
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);

  await ctx.reply(message, keyboard);
}

async function handleHelpCommand(ctx: Context) {
  const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ RBI Bot:

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å +/- –∑–Ω–∞–∫–∞–º–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets

${getTransactionExamples()}

üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ + –µ—Å–ª–∏ –¥–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏, - –µ—Å–ª–∏ –±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å–≥–∏
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
`;
  
  await ctx.reply(helpMessage, 
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries (–∫–Ω–æ–ø–∫–∏)
bot.action('balance', async (ctx) => {
  await ctx.answerCbQuery();
  await handleBalanceCommand(ctx);
});

bot.action('history', async (ctx) => {
  await ctx.answerCbQuery();
  await handleHistoryCommand(ctx);
});

bot.action('add', async (ctx) => {
  await ctx.answerCbQuery();
  const message = `
‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

${getTransactionExamples()}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>
–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`;
  
  await ctx.reply(message, Markup.inlineKeyboard([
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]));
});

bot.action('notifications', async (ctx) => {
  await ctx.answerCbQuery();
  await handleNotificationsCommand(ctx);
});

bot.action('help', async (ctx) => {
  await ctx.answerCbQuery();
  await handleHelpCommand(ctx);
});

bot.action('main_menu', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenuKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.action('notifications_on', async (ctx) => {
  await ctx.answerCbQuery();
  await updateUser(ctx.user!.telegramId, { notificationsEnabled: true });
  await ctx.reply('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã', 
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

bot.action('notifications_off', async (ctx) => {
  await ctx.answerCbQuery();
  await updateUser(ctx.user!.telegramId, { notificationsEnabled: false });
  await ctx.reply('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
  await handleHelpCommand(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /menu - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
bot.command('menu', async (ctx) => {
  await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenuKeyboard());
});

// –ö–æ–º–∞–Ω–¥–∞ /add
bot.command('add', async (ctx) => {
  const message = ctx.message.text.replace('/add', '').trim();
  
  if (!message) {
    await ctx.reply(`
‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

${getTransactionExamples()}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>
–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]));
    return;
  }

  await handleTransactionInput(ctx, message);
});

// –ö–æ–º–∞–Ω–¥–∞ /balance
bot.command('balance', async (ctx) => {
  await handleBalanceCommand(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /history
bot.command('history', async (ctx) => {
  await handleHistoryCommand(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /notifications
bot.command('notifications', async (ctx) => {
  const args = ctx.message.text.split(' ');
  const action = args[1]?.toLowerCase();
  
  if (!action || (action !== 'on' && action !== 'off')) {
    await handleNotificationsCommand(ctx);
    return;
  }

  const enabled = action === 'on';
  await updateUser(ctx.user!.telegramId, { notificationsEnabled: enabled });
  
  const status = enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
  const emoji = enabled ? 'üîî' : 'üîï';
  await ctx.reply(`${emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}`,
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('text', async (ctx) => {
  const message = ctx.message.text;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  if (message.startsWith('/')) {
    await ctx.reply(
      '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
      getMainMenuKeyboard()
    );
    return;
  }
  
  // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  await handleTransactionInput(ctx, message);
});

async function handleTransactionInput(ctx: Context & { user?: User }, message: string) {
  const result = parseTransactionWithValidation(message);
  
  if (!result.success) {
    await ctx.reply(`
‚ùå ${result.error}

${getTransactionExamples()}`,
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
    return;
  }

  const parsed = result.transaction!;

  try {
    const user = ctx.user!;
    const userName = user.firstName || user.username || `User${user.telegramId}`;
    
    const transactionRecord: TransactionRecord = {
      date: formatDate(new Date()),
      user: userName,
      amount: parsed.amount,
      description: parsed.description,
      type: parsed.type
    };

    await addTransactionRecord(transactionRecord);
    
    // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–¥—É—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    await ctx.reply('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]])
    );
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets
    setTimeout(async () => {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      await forceCheckForNewTransactions();
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    
  } catch (error) {
    console.error('Error adding transaction:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
  }
}



export { bot };

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è Context
declare module 'telegraf' {
  interface Context {
    user?: User;
  }
} 